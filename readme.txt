msp430SimpleDebugger
====================

This is a program that implements a simple debugger on the MSP-EXP430G2 development board

The program enables for the user to communicate to the MSP-EXP430G2 using 
the board's software Serial UART communication 


To run this program, you will need to satisfy the list of dependencies:	Equipment List:		* Windows XP operating system1		* The MSPEXP430G2 LaunchPad		* HyperTerminal for Windows XP 1 or SCREEN on MacOSX		* Code composer studio 5.3 or MSPDebug for MacOSXIt is important you met the satisfactory requirements in order to run the application correctly. This report does not include an installation guides for the equipment list, so it is up to the user to install the necessary dependencies his/herself. Tutorial to run on MacOSX coming soon!============================================================
The program consists of three functions:

- A 16 bit hex calculator: only addiction and subtraction
- A memory modify function
- A display memory function 

============================================================

B. Initial SetupFirst, plug in the MSPEXP430G2 board to the computer.Next, start up Code Composer Studio application. Next, open the CCS project from the CD drive.Next, open up HyperTerminal and set up a new terminal connection on the correct communication port.Build and run the project.C. Manual for the ProgramWhen you run the project, look at the HyperTerminal window and notice the “>” character. This indicates the program built correctly.(SCREENSHOT)The program contains 3 main functions:A 16 bit Hex Calculator, A Memory Modify Function, and a Display Memory Function.To Run the 16 bit HEX Calculator, enter an ‘H’ on the keyboard.  To run the Memory Modify Function, enter a ‘M’ on the keyboard. To run the Display Memory Function, enter a ‘D’ on the keyboard.HEX Calculator:This section entails how to use the Hex Calculator function.The Hex Calculator function is a sixteen bit calculator that can add and subtract. As stated before, Entering an ‘H’ in the terminal triggers this function to start.To choose to add, the User should enter an ‘A’ character from the keyboard.To choose to subtract, the User should enter an ‘S’ character from the keyboardOnce the User decides which function to use, The user needs to enter two 16 bit numbers (XXXX YYYY))in hexadecimal format to do the addition/subtraction operation onEx.1For example, enter a ‘0012’ as XXXX and ‘0034’ as your YYYY.Currently, This is what your output should look like if you are trying to add these two numbers together:          HA 0012  0034Ex.2      A different example, say you want to subtract 0034 from 0012enter a ‘0034’ as XXXX and ‘0012’ as your YYYY.This is what your output should look like if you are trying to subtract these two numbers together:          HS 0034  0012  Once the user enters both numbers, the program will automatically execute the operation and print the result. For each calculator operation the status flags C, V, N, and Z should be displayed and the user will be prompted back to the initial screen state.The result will be outputted as R=ZZZZ, where ZZZZ is the 16 bit resultHere is what the entire output should look like from the first example:HA 0012  0034  R=0046C=0  V=0  N=0 Z=0Here is what the entire output should look like from the second example:  HS 0034  0012  R=0022	C=0  V=0  N=0 Z=0	Memory Modify:This section entails how to use the Memory Modify function.The Memory Modify function enables the user to change memory at address XXXX. As stated before, Entering an ‘M’ in the terminal triggers this function to start.Once the user enters an ‘M’, The user can enter a  16bit memory address by entering 4 characters between 0-F on the keyboard.When the user finishes entering the address XXXX, The value contained in that address will appear followed by a newline.Note each hex value must lie within range of 0-F.This is what the user should see once he/she is done entering the memory address  M XXXX QQQQWhere XXXX is the memory address and QQQQ is the value STORED at that address.	(SCREENSHOT)Next, The User will be prompted by the following information:M XXXX and can proceed to complete the following three options:A.	The User can enter the character  ‘P’. This executes a skip on the present line and moves to the next higher address XXXX + 2.	The User see the following:XXXX QQQQWhere XXXX is the new memory address the person is looking at and QQQQ is the value contained at that memory address.B.	The User can enter the character  ‘N’.  This executes a skip on the present line and moves to the next lower address XXXX - 2.	The User see the following:XXXX QQQQWhere XXXX is the new memory address the person is looking at and QQQQ is the value contained at that memory address.C. The User can enter the character  a space " ".  , This executes an exit on the modify memory routine and returns the user to the input prompt.Display Memory:This section entails how to use the Display Memory function.The Display Memory function prints all memory values as a 4 digit HEX number and an ASCII character between the values of ($21 to $7E) from addresses XXXX to YYYY. As stated before, Entering an ‘D’ in the terminal triggers this function to start.Once entering the ‘D’ character, the user needs to input the range of memory address he wants to see by entering the memory address values XXXX and YYYY.XXXX is the starting memory address and YYYY is the ending memory address.Note each hex value must lie within range of 0-F.This is what the user should see on the HyperTerminal after entering the two-memory address:D XXXX YYYYOnce the User enters the two memory address, the program will enter a new line and output the memory values in the following way. Lets look at an example the user enters 0100 as XXXX and 0112 as YYYYHere is what the input into the HyperTerminal will look like:D 0100 0112Here is an example of the output:0100 3132 3330 4100 FE00 0203 0405 3941 4243	1230A.......9ABC 0110 41ED 42ED			A.B.The first 4 ascii characters are the initial memory address followed by the memory addresses that falls within a specified range. Once 8 memory values are printed, the program reprints the printed memory values in ASCII character format in the following way:	If the ASCII value falls within 0x21 and 0x7E,	Print the actual ASCII character value.	Else, print a period ‘.’ 